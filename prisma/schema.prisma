datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  points        Int           @default(0)
  accounts      Account[]
  sessions      Session[]
  role          Role          @default(USER)
  team          Team?         @relation(fields: [teamId], references: [id])
  teamId        String?
  requestee     TeamRequest[] @relation("requestee")
  requestor     TeamRequest[] @relation("requestor")
  Activities    Activities?   @relation(fields: [activitiesId], references: [id])
  activitiesId  String?
}

enum Role {
  USER
  ADMIN
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String        @unique
  points       Int
  users        User[]
  verified     Boolean       @default(false)
  teamRequests TeamRequest[]
  activities   Activities?   @relation(fields: [activitiesId], references: [id])
  activitiesId String?
  @@map("Teams")
}

model TeamRequest {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  approved    Response @default(NOT_RESPONDED)
  team        Team     @relation(fields: [teamId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  teamId      String
  requestee   User     @relation(fields: [requesteeId], references: [id], name: "requestee", onDelete: Cascade, onUpdate: Cascade)
  requesteeId String
  requestor   User     @relation(fields: [requestorId], references: [id], name: "requestor", onDelete: Cascade, onUpdate: Cascade)
  requestorId String
}

enum Response {
  NOT_RESPONDED
  REJECTED
  ACCEPTED
}

model Activities {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  points       Int
  name         String
  teams        Team[]
  participants User[]
}
